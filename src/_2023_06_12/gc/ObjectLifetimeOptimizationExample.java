package _2023_06_12.gc;

/**
 * Пример 1: Использование локальных переменных вместо полей экземпляров.
 * В методе performTask() мы объявляем и используем локальную переменную
 * localVar вместо хранения значения в поле экземпляра. Использование локальных
 * переменных вместо полей экземпляров позволяет объектам с более коротким временем жизни,
 * таким как localVar, быть созданными и удаленными быстрее, так как их область видимости
 * ограничена методом.
 *
 * Пример 2: Использование объектов с коротким временем жизни. В цикле for метода main()
 * мы создаем и используем объекты типа String с коротким временем жизни внутри цикла processItem().
 * Объекты создаются на каждой итерации цикла и удаляются после завершения обработки. Такой подход
 * позволяет избежать накопления большого количества объектов в памяти и ускоряет их сборку мусора.
 */
public class ObjectLifetimeOptimizationExample {
    public static void main(String[] args) {
        // Пример 1: Использование локальных переменных вместо полей экземпляров
        // Создание объекта и использование его внутри метода
        performTask();

        // Пример 2: Использование объектов с коротким временем жизни
        // Создание и использование объектов внутри цикла
        for (int i = 0; i < 10; i++) {
            processItem(i);
        }
    }

    public static void performTask() {
        // Использование локальной переменной вместо поля экземпляра
        int localVar = 10;
        System.out.println("Локальная переменная: " + localVar);
    }

    public static void processItem(int item) {
        // Использование объекта с коротким временем жизни
        String tempData = "Item " + item;
        System.out.println("Обработка элемента: " + tempData);
    }
}
Создание потоков можно повторить с кода, который был приведен на прошлом занятии, повторить в деталях,
что в чем разница и сделать акцент на том, что будет наиболее предпочтительнее в реальных проектах

 через Thread:

// Example1.java
 Thread t = new Thread() {
	@Override
	public void run() {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			throw new RuntimeException(e);
		}
		System.out.println("Hello world!");
	}
};

t.start();

---

через Runnable:

// Example2.java
Runnable r = () -> {
	try {
		Thread.sleep(5000);
	} catch (InterruptedException e) {
		throw new RuntimeException(e);
	}
	System.out.println("Hello world!");
};

Thread t = new Thread(r);

t.start();

---


Daemon thread:

Пример с кодом, где один из потоков обозначается как Daemon:

// Example3.java
public class Test extends Thread {

    public void run(){

        if (Thread.currentThread().isDaemon()) {

            //checking for daemon thread
            System.out.println("daemon thread work");
        } else {
            System.out.println("user thread work");
        }
    }

    public static void main(String[] args) {
        //creating threads
        Test t1=new Test();
        Test t2=new Test();
        Test t3=new Test();

        // now t1 is daemon thread
        t1.setDaemon(true);

        // starting threads
        t1.start();
        t2.start();
        t3.start();
    }
}

Если же создается поток как Daemon, то вначале он должен быть определен как Daemon, а позже запущен,
иначе вылетит java.lang.IllegalThreadStateException
(можно продемонстрировать)

---

Thread.sleep() - перевод потока в состояние ожидания на определённое время в миллисекундах
Поэкспериментировать с различными временами

// Example4.java
Thread t = new Thread( () -> {
	try {
		Thread.sleep(5000);
} catch (InterruptedException e) {
	throw new RuntimeException(e);
}
System.out.println("Sleepy thread");
});

t.start();

---

interrupt()

Для спящего потока произойдет прерывание и будет брошено исключение

// Example5.java
public class Test extends Thread {

    public void run(){

        System.out.println("Hello from java thread!");

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

    }

    public static void main(String[] args) {
        Test test = new Test();
        test.start();

        test.interrupt();
        System.out.println("Interrupted: " + test.isInterrupted());
    }
}

для активного потока ничего не произойдёт, но isInterrupted() будет изменен на true:

// Example6.java
public class Test extends Thread {

    public void run(){
        System.out.println("Hello from java thread!");

        for (int i = 0; i < 10; i++) {
            System.out.println(i);
        }
    }

    public static void main(String[] args) {
        Test test = new Test();
        test.start();

        test.interrupt();
        System.out.println("Interrupted: " + test.isInterrupted());
    }
}
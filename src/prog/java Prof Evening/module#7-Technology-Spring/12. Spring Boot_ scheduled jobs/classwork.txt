Рассмотрим сначала пример Планирование задач с использованием xml
Создайте новый шаблонный проект Spring в STS, выбрав вариант Simple Spring JPA Utility Project
(Простой служебный проект Spring JPA). Причина выбора этого шаблона проекта заключается в том, что мы намерены разработать пример задания, которое будет обновлять
данные в СУРБД серверной части.
После создания в проект нужно добавить обязательные зависимости:


Идентификатор группы    |     Идентификатор артефакта    |       Версия     |           Описание            | 

org.springframework.data         spring-datajpa               1.0.1.RELEASE        Библиотека Spring Data JPA

joda-time                        joda-time                        2.0          API-интерфейс для работы с датой и
                                                                              временем под названием Joda-Time
                                                                              (http://joda-time.sourceforge.net/),
                                                                               который используется в Spring Data
                                                                              JPA. В этой главе мы будем применять
                                                                               его в объектах предметной области

joda-time                        joda-time-hibernate               1.3         Библиотека Joda-Time для интеграции
                                                                               с Hibernate, обеспечивающая сохранение
                                                                                   типов данных даты и времени

com.google.guava                     guava                         10.0.1         Полезные вспомогательные классы

org.slf4j                          slf4j-log4j12                   1.6.1           Библиотека ведения журналов
                                         
   

Для начала реализуем простое задание - приложение, обслуживающее базу данных с информацией об автомобилях

Класс Car
package com.apress.prospring3.ch15.domain;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Version;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;
@Entity
@Table(name="car")
public class Car {
 private Long id;
 private String licensePlate;
 private String manufacturer;
 private DateTime manufactureDate;
 private int age;
 private int version;
 @Id
 @GeneratedValue(strategy = IDENTITY)
 @Column(name = "ID")
 public Long getId() {
 return id;
 }
 @Column(name="LICENSE_PLATE")
 public String getLicensePlate() {
 return licensePlate;
 }
 @Column(name="MANUFACTURER")
 public String getManufacturer() {
 return manufacturer;
 }
 @Column(name="MANUFACTURE_DATE")
 @Type(type="org.joda.time.contrib.hibernate.PersistentDateTime")
 public DateTime getManufactureDate() {
 return manufactureDate;
 }
 @Column(name="AGE")
 public int getAge() {
 return age;
 }

 @Version
 public int getVersion() {
 return version;
 }
 // Методы установки не показаны.
 public String toString() {
 return "License: " + licensePlate + " - Manufacturer: " + manufacturer
 + " - Manufacture Date: " + manufactureDate + " - Age: " + age;
 }
}

Также создадим код сценариев создания таблицы (bd.sql) и заполнения ее тестовыми данными (test.sql) для сущности Car

bd.sql: 

DROP TABLE IF EXISTS CONTACT;
CREATE TABLE CAR (
 ID INT NOT NULL AUTO_INCREMENT
 , LICENSE_PLATE VARCHAR(20) NOT NULL
 , MANUFACTURER VARCHAR(20) NOT NULL
 , MANUFACTURE_DATE DATE NOT NULL
 , AGE INT NOT NULL DEFAULT 0
 , VERSION INT NOT NULL DEFAULT 0
 , UNIQUE UQ_CAR_1 (LICENSE_PLATE)
 , PRIMARY KEY (ID)
);

test.sql:

insert into car (license_plate, manufacturer, manufacture_date)
 values ('LICENSE-1001', 'Ford', '1980-07-30');
insert into car (license_plate, manufacturer, manufacture_date)
 values ('LICENSE-1002', 'Toyota', '1992-12-30');
insert into car (license_plate, manufacturer, manufacture_date)
 values ('LICENSE-1003', 'BMW', '2003-1-6');

Определим интерфейс CarRepository:

public interface CarRepository extends CrudRepository<Car, Long> {
}

Вопрос к студентам:
Что такое CRUD? Какие основные операции существуют?
Задание:
Создайте интерфейс CarService и определите 3 метода:
1. Вывод всех машин
2.Сохранение новой машины
3.Обновление года машины.

Ответ:

public interface CarService {
 public List<Car> findAll();
 public Car save(Car car);
 public void updateCarAgeJob();
}

Имлементируйте все методы(кроме updateCarAgeJob) в CarServiceImpl. После выполнения показать метод updateCarAgeJob(вспоминаем логгеры)

@Service("carService")
@Repository
@Transactional
public class CarServiceImpl implements CarService {
 final Logger logger = LoggerFactory.getLogger(CarServiceImpl.class);
 @Autowired
 CarRepository carRepository;
 @Transactional(readOnly=true)
 public List<Car> findAll() {
 return Lists.newArrayList(carRepository.findAll());
 }
 public Car save(Car car) {
 return carRepository.save(car);
 }
 public void updateCarAgeJob() {
 // Обновить возраст автомобиля.
 List<Car> cars = findAll();
 DateTime currentDate = DateTime.now();
 int age;
 logger.info("");
 logger.info("Car age update job started");
 for (Car car: cars) {
 age = new Period(car.getManufactureDate(), currentDate,
 PeriodType.years()).getYears();
 car.setAge(age);
 save(car);
 logger.info("Car age update--- " + car);
 }
 logger.info("Car age update job completed successfully");
 logger.info("");
 }
}

В коде определены два метода; один из них извлекает информацию обо всех автомобилях, 
а другой сохраняет обновленный объект Car. 
Третий метод, updateCarAgeJob(),представляет собой задание, 
которое должно запускаться на регулярной основе и обновлять возраст автомобиля, имея дату его изготовления и текущую дату.

Теперь для поддержки рассматримаевого примера создадим конфигурацию:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns=http://www.springframework.org/schema/beans
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:jdbc="http://www.springframework.org/schema/jdbc"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xmlns:jpa="http://www.springframework.org/schema/data/jpa"
 xmlns:repository="http://www.springframework.org/schema/data/repository"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-3.1.xsd
 http://www.springframework.org/schema/jdbc
 http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
 http://www.springframework.org/schema/data/jpa
 http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
 http://www.springframework.org/schema/data/repository
 http://www.springframework.org/schema/data/repository/
spring-repository-1.0.xsd">
 <jdbc:embedded-database id="dataSource" type="H2">
 <jdbc:script location="classpath:schema.sql"/>
 <jdbc:script location="classpath:test-data.sql"/>
 </jdbc:embedded-database>
 <bean id="transactionManager"
 class="org.springframework.orm.jpa.JpaTransactionManager">
 <property name="entityManagerFactory" ref="emf"/>
 </bean>
 <tx:annotation-driven transaction-manager="transactionManager" />
 <bean id="emf"
class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
 <property name="dataSource" ref="dataSource" />
 <property name="jpaVendorAdapter">
 <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
 </property>
 <property name="packagesToScan"
 value="com.apress.prospring3.ch15.domain"/>
 <property name="jpaProperties">
 <props>
 <prop key="hibernate.dialect">
 org.hibernate.dialect.H2Dialect
 </prop>
 <prop key="hibernate.max_fetch_depth">3</prop>
 <prop key="hibernate.jdbc.fetch_size">50</prop>
 <prop key="hibernate.jdbc.batch_size">10</prop>
 <prop key="hibernate.show_sql">true</prop>
 </props>
 </property>
 </bean>

<context:annotation-config/>
 <jpa:repositories base-package="com.apress.prospring3.ch15.repository"
 entity-manager-factory-ref="emf"
 transaction-manager-ref="transactionManager"/>
 <context:component-scan
 base-package="com.apress.prospring3.ch15.service.jpa" />
</beans>

А теперь займемся планированием задания по обновлению возраста автомобилей в Spring, для этого нам необходимо пространство имен task.
task предоставляет упрощенную конфигурацию для планируемых задач за счет применения
абстракции TaskScheduler, доступной в Spring.
 
tаsk-namespace-app-context.xml:

<?xml version="l.O" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:task="http://www.springframework.org/schema/task"
xmlns:xsi="http://www.wЗ.org/2001/XМLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task.xsd">
<import resource="car-job-app-context.xml"/>
<task:scheduler id="myScheduler" pool-size="lO"/>
<task:scheduled-tasks scheduler="myScheduler">
<task:scheduled ref="carService" method="updateCarAgeJob"
fixed-delay="lOOOO"/>
</task:scheduled-tasks>
</beans>

В этом коде импортируется контекст для приложения, работающего с автомобилями. Обнаружив дескриптор <task: scheduler>, платформа Spring создает экземпляр класса ThreadPoolTaskScheduler, при этом атрибут pool-size задает размер пула потоков, который планировщик может использовать. Внутри дескриптора
<task: scheduled-tasks> допускается планировать одну или большее число задач.
В дескрипторе <task: scheduled> задача может ссылаться на бин Spring (в данном
случае это бин carService) и специфический метод этого бина (в рассматриваемом
примере это метод updateCarAgeJob () ).
Атрибут fixed-delay указывает Spring на необходимость создания
PeriodicTrigger как реализации Trigger для TaskScheduler.

Создадим Main метод для запуска планирования задач:

public class Main {
public static void main (String [] args) {
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
ctx.load("classpath:META-INF/spring/task-namespace-app-context.xml");
ctx. refresh ();
while (true) {
      }
    }
  }
Запуск этой программы даст следующий вывод, получаемый каждые 10 секунд:
<Car age update job started>
<Car age update--- License: LICENSE-1001 - Manufacturer:
Ford - Manufacture Date: 1980-07-29Т20:ОО:ОО.000-04:ОО - Age: 33>
<Car age update--- License: LICENSE-1002 - Manufacturer:
Toyota - Manufacture Date: 1992-12-29Т19:ОО:ОО.000-05:ОО - Age: 21>
<Car age update--- License: LICENSE-1003 - Manufacturer:
ВМW - Manufacture Date: 2003-01-05Т19:ОО:ОО.000-05:ОО - Age: 11>
<Car age update job completed successfully>

В выводе видно, что атрибуты age автомобилей были успешно обновлены.
Кроме фиксированного интервала доступен более гибкий механизм планирования,
 предусматривающий использование выражения cron.
замените:
<task:scheduled ref="carService" rnethod="updateCarAgeJob"
fixed-delay="lOOOO"/> 

на

<task:scheduled ref="carService" rnethod="updateCarAgeJob"
cron="O * * * * *"/> 

и посмотрите на результат.

Создадим еще один проект. Рассмотрим планирование задач с помощью аннотаций.

Аннотация @EnableScheduling используется для включения планировщика для вашего приложения. Эту аннотацию следует добавить в основной файл класса приложения Spring Boot.

@SpringBootApplication
@EnableScheduling

public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}

Аннотация @Scheduled используется для запуска планировщика на определенный период времени.
Следующий код позволит выполнять задачу каждую минуту, начиная с 9:00 и заканчивая в 9:59 каждый день.

@Component
public class Scheduler {
   @Scheduled(cron = "0 * 9 * * ?")
   public void cronJobSch() {
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
      Date now = new Date();
      String strDate = sdf.format(now);
      System.out.println("Java cron job expression:: " + strDate);
   }
}


Планировщик с фиксированной скоростью используется для выполнения задач в определенное время.
Он не ждет завершения предыдущего задания. 
Значения должны быть в миллисекундах. Пример кода для выполнения задачи каждую секунду после запуска приложения:

@Component
public class Scheduler {
   @Scheduled(fixedRate = 1000)
   public void fixedRateSch() {
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

      Date now = new Date();
      String strDate = sdf.format(now);
      System.out.println("Fixed Rate scheduler:: " + strDate);
   }
}

Планировщик с фиксированной задержкой используется для выполнения задач в определенное время.
Следует дождаться завершения предыдущего задания. Значения должны быть в миллисекундах.

@Component
public class Scheduler {
   @Scheduled(fixedDelay = 1000, initialDelay = 3000)
   public void fixedDelaySch() {
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
      Date now = new Date();
      String strDate = sdf.format(now);
      System.out.println("Fixed Delay scheduler:: " + strDate);
   }
}

Здесь initialDelay – это время, после которого задача будет выполнена в первый раз после начального значения задержки.

Через каждые 3 секунды задача планировщика с фиксированной задержкой выполняется каждую секунду.

Задание:

Создайте класс CheckSoup, который будет выводить напоминание: "Не забудь проверить суп".
 Начальная задержка должна быть 5 секунд и продолжение выполнения задачи каждые 3 секунды

